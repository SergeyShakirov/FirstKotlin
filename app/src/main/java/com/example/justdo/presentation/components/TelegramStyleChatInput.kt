package com.example.justdo.presentation.components

import android.Manifest
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.outlined.Folder
import androidx.compose.material.icons.outlined.LocationOn
import androidx.compose.material.icons.outlined.Photo
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.SolidColor
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardCapitalization
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.justdo.ui.theme.TelegramColors
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.core.tween
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@Composable
fun TelegramStyleChatInput(
    value: String,
    onValueChange: (String) -> Unit,
    onSendMessage: () -> Unit,
    onAttachImage: (String) -> Unit = {},
    onAttachFile: (String) -> Unit = {},
    onAttachLocation: () -> Unit = {},
    onVoiceMessageSent: (ByteArray) -> Unit = {},
    modifier: Modifier = Modifier
) {
    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI
    var isRecording by remember { mutableStateOf(false) }
    var recordingTimeSeconds by remember { mutableStateOf(0) }
    var showAttachmentMenu by remember { mutableStateOf(false) }
    var showEmojiKeyboard by remember { mutableStateOf(false) }

    // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —ç–º–æ–¥–∑–∏
    val emojiBackgroundColor = Color(0xFFF0F2F5)

    // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
    val requestAudioPermissionLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
            isRecording = true
            recordingTimeSeconds = 0

            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä)
            coroutineScope.launch {
                while (isRecording) {
                    delay(1000)
                    recordingTimeSeconds++
                }
            }
        }
    }

    // –õ–∞—É–Ω—á–µ—Ä—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π
    val imagePickerLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri ->
        uri?.let {
            onAttachImage(it.toString())
            showAttachmentMenu = false
        }
    }

    val filePickerLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri ->
        uri?.let {
            onAttachFile(it.toString())
            showAttachmentMenu = false
        }
    }

    Surface(
        color = TelegramColors.Surface,
        tonalElevation = 4.dp,
        modifier = modifier.fillMaxWidth()
    ) {
        Column {
            // –ú–µ–Ω—é –≤–ª–æ–∂–µ–Ω–∏–π
            AnimatedVisibility(
                visible = showAttachmentMenu,
                enter = fadeIn(animationSpec = tween(200)),
                exit = fadeOut(animationSpec = tween(200))
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    AttachmentButton(
                        icon = Icons.Outlined.Photo,
                        label = "–§–æ—Ç–æ",
                        backgroundColor = Color(0xFF5E35B1),
                        onClick = { imagePickerLauncher.launch("image/*") }
                    )

                    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                    AttachmentButton(
                        icon = Icons.Outlined.Folder,
                        label = "–î–æ–∫—É–º–µ–Ω—Ç",
                        backgroundColor = Color(0xFF00897B),
                        onClick = { filePickerLauncher.launch("*/*") }
                    )

                    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                    AttachmentButton(
                        icon = Icons.Outlined.LocationOn,
                        label = "–õ–æ–∫–∞—Ü–∏—è",
                        backgroundColor = Color(0xFFF9A825),
                        onClick = {
                            onAttachLocation()
                            showAttachmentMenu = false
                        }
                    )
                }
            }

            // –ü–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è)
            AnimatedVisibility(
                visible = showEmojiKeyboard,
                enter = fadeIn(animationSpec = tween(200)),
                exit = fadeOut(animationSpec = tween(200))
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(200.dp)
                        .background(emojiBackgroundColor)
                        .padding(8.dp),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–º–æ–¥–∑–∏
                    val commonEmojis = listOf("üòä", "üëç", "üôè", "‚ù§Ô∏è", "üëè", "üòÇ", "üî•", "üéâ")
                    commonEmojis.forEach { emoji ->
                        Text(
                            text = emoji,
                            fontSize = 24.sp,
                            modifier = Modifier
                                .padding(8.dp)
                                .clickable {
                                    onValueChange(value + emoji)
                                }
                        )
                    }
                }
            }

            // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–≤–æ–¥–∞
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 8.dp, vertical = 8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // –ö–Ω–æ–ø–∫–∞ –≤–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                IconButton(
                    onClick = {
                        showAttachmentMenu = !showAttachmentMenu
                        showEmojiKeyboard = false
                    },
                    modifier = Modifier.size(40.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.AttachFile,
                        contentDescription = "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å",
                        tint = if (showAttachmentMenu) TelegramColors.Primary else TelegramColors.TextSecondary
                    )
                }

                // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                Box(
                    modifier = Modifier
                        .weight(1f)
                        .clip(RoundedCornerShape(18.dp))
                        .background(TelegramColors.DateBadge)
                        .padding(horizontal = 16.dp, vertical = 8.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        if (isRecording) {
                            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier.fillMaxWidth()
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Mic,
                                    contentDescription = "–ó–∞–ø–∏—Å—å",
                                    tint = Color.Red,
                                    modifier = Modifier.padding(end = 8.dp)
                                )
                                Text(
                                    text = formatRecordingTime(recordingTimeSeconds),
                                    color = TelegramColors.TextPrimary
                                )
                                Spacer(Modifier.weight(1f))
                                Text(
                                    text = "–°–≤–∞–π–ø–Ω–∏—Ç–µ –≤–ª–µ–≤–æ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                                    color = TelegramColors.TextSecondary,
                                    fontSize = 12.sp
                                )
                            }
                        } else {
                            // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                            BasicTextField(
                                value = value,
                                onValueChange = { newValue ->
                                    onValueChange(newValue)
                                },
                                modifier = Modifier
                                    .weight(1f)
                                    .padding(vertical = 4.dp),
                                textStyle = TextStyle(
                                    color = TelegramColors.TextPrimary,
                                    fontSize = 16.sp
                                ),
                                cursorBrush = SolidColor(TelegramColors.Primary),
                                keyboardOptions = KeyboardOptions(
                                    capitalization = KeyboardCapitalization.Sentences,
                                    autoCorrect = true,
                                    keyboardType = KeyboardType.Text,
                                    imeAction = ImeAction.Send
                                ),
                                decorationBox = { innerTextField ->
                                    Box {
                                        if (value.isEmpty()) {
                                            Text(
                                                text = "–°–æ–æ–±—â–µ–Ω–∏–µ",
                                                color = TelegramColors.TextHint,
                                                fontSize = 16.sp
                                            )
                                        }
                                        innerTextField()
                                    }
                                }
                            )
                        }

                        // –ö–Ω–æ–ø–∫–∞ —ç–º–æ–¥–∑–∏
                        if (!isRecording) {
                            IconButton(
                                onClick = {
                                    showEmojiKeyboard = !showEmojiKeyboard
                                    showAttachmentMenu = false
                                },
                                modifier = Modifier.size(32.dp)
                            ) {
                                Icon(
                                    imageVector = Icons.Default.SentimentSatisfied,
                                    contentDescription = "–≠–º–æ–¥–∑–∏",
                                    tint = if (showEmojiKeyboard) TelegramColors.Primary else TelegramColors.TextSecondary
                                )
                            }
                        }
                    }
                }

                // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
                Box(
                    modifier = Modifier.padding(start = 8.dp)
                ) {
                    if (value.isNotEmpty()) {
                        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        IconButton(
                            onClick = {
                                onSendMessage()
                                showEmojiKeyboard = false
                                showAttachmentMenu = false
                            },
                            modifier = Modifier
                                .size(40.dp)
                                .background(TelegramColors.Primary, CircleShape)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Send,
                                contentDescription = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                                tint = Color.White
                            )
                        }
                    } else if (isRecording) {
                        // –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
                        IconButton(
                            onClick = {
                                isRecording = false

                                // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                if (recordingTimeSeconds > 0) {
                                    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å —Ä–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
                                    onVoiceMessageSent(ByteArray(0))
                                }
                                recordingTimeSeconds = 0
                            },
                            modifier = Modifier
                                .size(40.dp)
                                .background(Color.Red, CircleShape)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Stop,
                                contentDescription = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
                                tint = Color.White
                            )
                        }
                    } else {
                        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        IconButton(
                            onClick = {
                                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
                                requestAudioPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
                                showEmojiKeyboard = false
                                showAttachmentMenu = false
                            },
                            modifier = Modifier
                                .size(40.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Mic,
                                contentDescription = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                tint = TelegramColors.TextSecondary
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun AttachmentButton(
    icon: ImageVector,
    label: String,
    backgroundColor: Color,
    onClick: () -> Unit
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.padding(8.dp)
    ) {
        Box(
            modifier = Modifier
                .size(50.dp)
                .background(backgroundColor, CircleShape)
                .clickable(onClick = onClick),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                imageVector = icon,
                contentDescription = label,
                tint = Color.White,
                modifier = Modifier.size(24.dp)
            )
        }

        Spacer(modifier = Modifier.height(4.dp))

        Text(
            text = label,
            fontSize = 12.sp,
            color = TelegramColors.TextSecondary
        )
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
private fun formatRecordingTime(seconds: Int): String {
    val min = seconds / 60
    val sec = seconds % 60
    return "%02d:%02d".format(min, sec)
}