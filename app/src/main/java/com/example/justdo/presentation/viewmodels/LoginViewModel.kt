package com.example.justdo.presentation.viewmodels

import android.app.Activity
import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.justdo.data.models.User
import com.example.justdo.data.repository.AuthRepository
import com.google.firebase.FirebaseException
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.PhoneAuthCredential
import com.google.firebase.auth.PhoneAuthOptions
import com.google.firebase.auth.PhoneAuthProvider
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.util.concurrent.TimeUnit
import com.example.justdo.utils.BiometricAuthHelper

/**
 * –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
data class CountryInfo(
    val name: String,
    val code: String,
    val flagEmoji: String
)

/**
 * ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
class LoginViewModel(
    private val authRepository: AuthRepository,
    private val context: android.content.Context? = null
) : ViewModel() {

    // –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    private val biometricAuthHelper = context?.let { BiometricAuthHelper(it) }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    private val _uiState = MutableStateFlow(LoginUiState())
    val uiState: StateFlow<LoginUiState> = _uiState.asStateFlow()

    // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    private var verificationId: String? = null

    // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    private var phoneCredential: PhoneAuthCredential? = null

    // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
    private var resendTimer: Job? = null

    // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å –∫–æ–¥–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    private val _countries = listOf(
        CountryInfo("–ì—Ä—É–∑–∏—è", "+995", "üá¨üá™"),
        CountryInfo("–†–æ—Å—Å–∏—è", "+7", "üá∑üá∫"),
        CountryInfo("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "+7", "üá∞üáø"),
        CountryInfo("–£–∫—Ä–∞–∏–Ω–∞", "+380", "üá∫üá¶"),
        CountryInfo("–ë–µ–ª–∞—Ä—É—Å—å", "+375", "üáßüáæ"),
        CountryInfo("–°–®–ê", "+1", "üá∫üá∏"),
        CountryInfo("–ì–µ—Ä–º–∞–Ω–∏—è", "+49", "üá©üá™"),
        CountryInfo("–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "+44", "üá¨üáß"),
        CountryInfo("–§—Ä–∞–Ω—Ü–∏—è", "+33", "üá´üá∑"),
        CountryInfo("–ò—Ç–∞–ª–∏—è", "+39", "üáÆüáπ"),
        CountryInfo("–ò—Å–ø–∞–Ω–∏—è", "+34", "üá™üá∏"),
        CountryInfo("–ö–∏—Ç–∞–π", "+86", "üá®üá≥"),
        CountryInfo("–Ø–ø–æ–Ω–∏—è", "+81", "üáØüáµ"),
        CountryInfo("–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", "+82", "üá∞üá∑"),
        CountryInfo("–ò–Ω–¥–∏—è", "+91", "üáÆüá≥"),
        CountryInfo("–ë—Ä–∞–∑–∏–ª–∏—è", "+55", "üáßüá∑")
    )

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏–∏
    init {
        try {
            authRepository.initGoogleSignIn()

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏
            val isBiometricAvailable = biometricAuthHelper?.isBiometricAvailable() ?: false

            _uiState.update {
                it.copy(
                    countryList = _countries,
                    selectedCountry = _countries[0],
                    isBiometricAvailable = isBiometricAvailable
                )
            }

            Log.d(TAG, "–ë–∏–æ–º–µ—Ç—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: $isBiometricAvailable")
        } catch (e: Exception) {
            Log.e(TAG, "Error initializing Google Sign-In", e)
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
     */
    fun signInWithGoogle(idToken: String) {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true, error = "") }

            try {
                val result = authRepository.signInWithGoogle(idToken)
                result.onSuccess { user ->
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            isAuthenticated = true,
                            user = user
                        )
                    }
                }
                    .onFailure { e ->
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                error = e.message ?: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google"
                            )
                        }
                    }
            } catch (e: Exception) {
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google"
                    )
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ Intent –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
     */
    fun getGoogleSignInIntent() = authRepository.getGoogleSignInIntent()

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    fun showPhoneLogin() {
        _uiState.update { it.copy(showPhoneLogin = true) }
    }

    /**
     * –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –∏ –∫–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    fun selectCountry(country: CountryInfo) {
        _uiState.update { it.copy(selectedCountry = country) }
    }

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    fun startPhoneAuth(
        phoneNumber: String,
        activity: Activity,
        onVerificationSent: () -> Unit,
        onError: (String) -> Unit
    ) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã
        val country = _uiState.value.selectedCountry
        var formattedNumber = phoneNumber

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ +
        formattedNumber = formattedNumber.replace(Regex("[^0-9]"), "")

        // –£–¥–∞–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞
        val countryCodeDigits = country?.code?.replace(Regex("[^0-9]"), "")
        if (countryCodeDigits?.let { formattedNumber.startsWith(it) } == true) {
            formattedNumber = formattedNumber.substring(countryCodeDigits.length)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ E.164
        if (country != null) {
            formattedNumber = "${country.code}${formattedNumber}"
        }

        _uiState.update { it.copy(isLoading = true, error = "", formattedPhoneNumber = formattedNumber) }

        try {
            val auth = FirebaseAuth.getInstance()

            // –°–æ–∑–¥–∞–µ–º callback-–æ–±—ä–µ–∫—Ç
            val callbacks = object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
                override fun onVerificationCompleted(credential: PhoneAuthCredential) {
                    Log.e(TAG, "üì± –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    phoneCredential = credential
                    _uiState.update { it.copy(isLoading = false, isVerificationCompleted = true) }
                }

                override fun onVerificationFailed(e: FirebaseException) {
                    Log.e(TAG, "üì± –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${e.message}")
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            error = e.message ?: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞"
                        )
                    }
                    onError(e.message ?: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞")
                }

                override fun onCodeSent(
                    verificationId: String,
                    token: PhoneAuthProvider.ForceResendingToken
                ) {
                    Log.e(TAG, "üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, verificationId: $verificationId")
                    this@LoginViewModel.verificationId = verificationId
                    _uiState.update { it.copy(isLoading = false, isCodeSent = true) }
                    onVerificationSent()
                }
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            val options = PhoneAuthOptions.newBuilder(auth)
                .setPhoneNumber(formattedNumber)
                .setTimeout(60L, TimeUnit.SECONDS)
                .setActivity(activity)
                .setCallbacks(callbacks)
                .build()

            // –ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            PhoneAuthProvider.verifyPhoneNumber(options)

        } catch (e: Exception) {
            Log.e(TAG, "üì± –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${e.message}")
            e.printStackTrace()
            _uiState.update {
                it.copy(
                    isLoading = false,
                    error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                )
            }
            onError(e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    fun verifyPhoneCode(code: String) {
        _uiState.update { it.copy(isLoading = true, error = "") }
        try {
            val vid = verificationId
            if (vid == null) {
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID"
                    )
                }
                return
            }

            val credential = authRepository.verifyPhoneCode(vid, code)
            if (credential != null) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
                phoneCredential = credential
                viewModelScope.launch {
                    val result = authRepository.signInWithPhoneCredential(credential)
                    result.onSuccess { user ->
                        _uiState.update { it1 ->
                            it1.copy(
                                isLoading = false,
                                isVerificationCompleted = user.username.isEmpty(),
                                user = user.takeIf { it.username.isNotEmpty() },
                                username = user.username,
                                isAuthenticated = user.username.isNotEmpty()
                            )
                        }
                    }.onFailure { e ->
                        Log.e(TAG, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", e)
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                error = e.message ?: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                            )
                        }
                    }
                }
            } else {
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                    )
                }
            }
        } catch (e: Exception) {
            _uiState.update {
                it.copy(
                    isLoading = false,
                    error = e.message ?: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞"
                )
            }
        }

    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
     */
    fun saveUsernameAndSignIn(username: String) {
        Log.d(TAG, "saveUsernameAndSignIn –≤—ã–∑–≤–∞–Ω —Å –∏–º–µ–Ω–µ–º: $username")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PhoneAuthCredential
        val credential = phoneCredential
        if (credential == null) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            _uiState.update {
                it.copy(
                    error = "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                )
            }
            return
        }

        _uiState.update { it.copy(isLoading = true, error = "", username = username) }

        viewModelScope.launch {
            try {
                Log.d(TAG, "–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å phoneCredential")

                // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ credential
                val result = authRepository.signInWithPhoneCredential(credential)

                result.onSuccess { user ->
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
                    val finalUser = user.copy(username = username)

                    try {
                        // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
                        authRepository.updateUserProfile(finalUser)

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                isAuthenticated = true,
                                user = finalUser
                            )
                        }

                        Log.d(TAG, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${finalUser.id}, –∏–º—è: $username")
                    } catch (e: Exception) {
                        Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è", e)

                        // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                isAuthenticated = true,
                                user = finalUser,
                                error = "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏"
                            )
                        }
                    }
                }.onFailure { e ->
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", e)
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            error = e.message ?: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                        )
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", e)
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                    )
                }
            }
        }
    }



    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ credential
     */
    private fun signInWithPhoneCredential(credential: PhoneAuthCredential) {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true, error = "") }

            try {
                val result = authRepository.signInWithPhoneCredential(credential)
                result.onSuccess { user ->
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    val finalUser = if (_uiState.value.username.isNotEmpty()) {
                        user.copy(username = _uiState.value.username)
                    } else {
                        user
                    }

                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            isAuthenticated = true,
                            user = finalUser
                        )
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                    if (_uiState.value.username.isNotEmpty()) {
                        updateUserProfile(finalUser)
                    }
                }
                    .onFailure { e ->
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                error = e.message ?: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                            )
                        }
                    }
            } catch (e: Exception) {
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                    )
                }
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun updateUserProfile(user: User) {
        viewModelScope.launch {
            try {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
                // authRepository.updateUserProfile(user)
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e)
            }
        }
    }

    /**
     * –¢–∞–π–º–µ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
     */
    private fun startResendTimer() {
        resendTimer?.cancel()

        resendTimer = viewModelScope.launch {
            var timeLeft = 60 // 60 —Å–µ–∫—É–Ω–¥ –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

            _uiState.update {
                it.copy(
                    canResendCode = false,
                    resendTimeLeft = timeLeft
                )
            }

            while (timeLeft > 0) {
                delay(1000)
                timeLeft--
                _uiState.update { it.copy(resendTimeLeft = timeLeft) }
            }

            _uiState.update { it.copy(canResendCode = true) }
        }
    }

    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    fun resetState() {
        _uiState.update { LoginUiState(countryList = _countries, selectedCountry = _countries[0]) }
        resendTimer?.cancel()
        verificationId = null
        phoneCredential = null
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
     */
    fun backToVerification() {
        _uiState.update { it.copy(isVerificationCompleted = false, isCodeSent = true) }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ ViewModel
     */
    override fun onCleared() {
        super.onCleared()
        resendTimer?.cancel()
    }

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å LoginViewModel –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—à–∏–±–∫–∏:
    fun setError(message: String) {
        _uiState.update { it.copy(error = message) }
    }

    // –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sign-In:
    fun initGoogleSignIn() {
        try {
            authRepository.initGoogleSignIn()
        } catch (e: Exception) {
            setError("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sign-In: ${e.message}")
        }
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–æ–º–µ—Ç—Ä–∏–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
     */
    private fun checkBiometricAvailability() {
        if (context != null) {
            val biometricHelper = BiometricAuthHelper(context)
            val isBiometricAvailable = biometricHelper.isBiometricAvailable()
            val isBiometricEnabled = biometricHelper.isBiometricEnabled()

            _uiState.update {
                it.copy(
                    isBiometricAvailable = isBiometricAvailable,
                    isBiometricEnabled = isBiometricEnabled
                )
            }

            // –ï—Å–ª–∏ –±–∏–æ–º–µ—Ç—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º
            if (isBiometricAvailable && isBiometricEnabled) {
                authenticateWithBiometric()
            }
        }
    }

    /**
     * Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ViewModel —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
     */
    /**
     * –ó–∞–ø—É—Å–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –±–∏–æ–º–µ—Ç—Ä–∏–∏
     */
    fun authenticateWithBiometric() {
        _uiState.update { it.copy(showBiometricPrompt = true) }
    }

    /**
     * –£—Å–ø–µ—à–Ω–∞—è –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
     */
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    fun onBiometricSuccess() {
        if (context == null) return

        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true, showBiometricPrompt = false, error = "") }

            try {
                val biometricHelper = BiometricAuthHelper(context)
                val userId = biometricHelper.getBiometricUserId()

                if (userId == null) {
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            error = "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        )
                    }
                    return@launch
                }

                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore –ø–æ ID
                val userDoc = authRepository.getUserById(userId)

                if (userDoc == null) {
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            error = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        )
                    }
                    return@launch
                }

                // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        isAuthenticated = true,
                        user = userDoc
                    )
                }

            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", e)
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = "–û—à–∏–±–∫–∞: ${e.message}"
                    )
                }
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    private fun saveBiometricSettings(enable: Boolean, userId: String? = null) {
        if (context != null) {
            val biometricHelper = BiometricAuthHelper(context)

            biometricHelper.setBiometricEnabled(enable)
            if (enable && userId != null) {
                biometricHelper.saveBiometricUserId(userId)
            } else if (!enable) {
                biometricHelper.clearBiometricData()
            }

            _uiState.update {
                it.copy(isBiometricEnabled = enable)
            }
        }
    }

    /**
     * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∏–æ–º–µ—Ç—Ä–∏–∏
     */
    private fun onSuccessfulAuthentication(user: User) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        _uiState.update {
            it.copy(
                isLoading = false,
                isAuthenticated = true,
                user = user
            )
        }

        // –ï—Å–ª–∏ –±–∏–æ–º–µ—Ç—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if (_uiState.value.isBiometricAvailable && _uiState.value.useBiometricForNextLogin) {
            saveBiometricSettings(true, user.id)
        }
    }

    /**
     * –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø–æ–∫–∞–∑–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
     */
    fun resetBiometricPrompt() {
        _uiState.update { it.copy(showBiometricPrompt = false) }
    }

    class Factory(
        private val authRepository: AuthRepository,
        private val context: android.content.Context? = null
    ) : ViewModelProvider.Factory {
        @Suppress("UNCHECKED_CAST")
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(LoginViewModel::class.java)) {
                return LoginViewModel(authRepository, context) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }

    companion object {
        private const val TAG = "LoginViewModel"
    }
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
data class LoginUiState(
    val isLoading: Boolean = false,
    val error: String = "",
    val isAuthenticated: Boolean = false,
    val user: User? = null,
    val showPhoneLogin: Boolean = false,
    val isCodeSent: Boolean = false,
    val isVerificationCompleted: Boolean = false,
    val canResendCode: Boolean = false,
    val resendTimeLeft: Int = 0,
    val countryList: List<CountryInfo> = emptyList(),
    val selectedCountry: CountryInfo? = null,
    val username: String = "",
    val formattedPhoneNumber: String = "",
    val isBiometricAvailable: Boolean = false,
    val showBiometricPrompt: Boolean = false,
    val useBiometricForNextLogin: Boolean = false,
    val isBiometricEnabled: Boolean = false
)