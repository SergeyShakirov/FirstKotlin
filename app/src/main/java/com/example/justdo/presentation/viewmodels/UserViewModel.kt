package com.example.justdo.presentation.viewmodels

import android.app.Activity
import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.justdo.data.models.AuthState
import com.example.justdo.data.models.CountryInfo
import com.example.justdo.data.models.LoginUiState
import com.example.justdo.data.models.User
import com.example.justdo.data.repository.UserRepository
import com.google.firebase.FirebaseException
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.PhoneAuthCredential
import com.google.firebase.auth.PhoneAuthOptions
import com.google.firebase.auth.PhoneAuthProvider
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.util.concurrent.TimeUnit

/**
 * ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class UserViewModel(
    private val userRepository: UserRepository
) : ViewModel() {

    private val TAG = "UserViewModel"

    // –ï–¥–∏–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö isAuthorized –∏ currentUser)
    private val _authState = MutableStateFlow<AuthState>(AuthState.Loading)
    val authState: StateFlow<AuthState> = _authState.asStateFlow()

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    val isAuthorized: StateFlow<Boolean> = authState.map { state ->
        state is AuthState.Authorized
    }.stateIn(viewModelScope, SharingStarted.Eagerly, false)

    val currentUser: StateFlow<User?> = authState.map { state ->
        if (state is AuthState.Authorized) state.user else null
    }.stateIn(viewModelScope, SharingStarted.Eagerly, null)

    val isLoading: StateFlow<Boolean> = authState.map { state ->
        state is AuthState.Loading
    }.stateIn(viewModelScope, SharingStarted.Eagerly, true)

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    private val _uiState = MutableStateFlow(LoginUiState())
    val uiState: StateFlow<LoginUiState> = _uiState.asStateFlow()

    // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å –∫–æ–¥–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    private val _countries = listOf(
        CountryInfo("–ì—Ä—É–∑–∏—è", "+995", "üá¨üá™"),
        CountryInfo("–†–æ—Å—Å–∏—è", "+7", "üá∑üá∫"),
        CountryInfo("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "+7", "üá∞üáø"),
        CountryInfo("–£–∫—Ä–∞–∏–Ω–∞", "+380", "üá∫üá¶"),
        CountryInfo("–ë–µ–ª–∞—Ä—É—Å—å", "+375", "üáßüáæ"),
        CountryInfo("–°–®–ê", "+1", "üá∫üá∏"),
        CountryInfo("–ì–µ—Ä–º–∞–Ω–∏—è", "+49", "üá©üá™"),
        CountryInfo("–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "+44", "üá¨üáß"),
        CountryInfo("–§—Ä–∞–Ω—Ü–∏—è", "+33", "üá´üá∑"),
        CountryInfo("–ò—Ç–∞–ª–∏—è", "+39", "üáÆüáπ"),
        CountryInfo("–ò—Å–ø–∞–Ω–∏—è", "+34", "üá™üá∏"),
        CountryInfo("–ö–∏—Ç–∞–π", "+86", "üá®üá≥"),
        CountryInfo("–Ø–ø–æ–Ω–∏—è", "+81", "üáØüáµ"),
        CountryInfo("–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", "+82", "üá∞üá∑"),
        CountryInfo("–ò–Ω–¥–∏—è", "+91", "üáÆüá≥"),
        CountryInfo("–ë—Ä–∞–∑–∏–ª–∏—è", "+55", "üáßüá∑")
    )

    // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
    private var resendTimer: Job? = null

    // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    private var verificationId: String? = null

    // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    private var phoneCredential: PhoneAuthCredential? = null

    init {
        userRepository.initGoogleSignIn()
        checkAuthStatus()
        _uiState.update {
            it.copy(
                countryList = _countries,
                selectedCountry = _countries[0]
            )
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun checkAuthStatus() {
        viewModelScope.launch {
            try {
                _authState.value = AuthState.Loading
                val user = userRepository.getCurrentUser()

                if (user != null) {
                    _authState.value = AuthState.Authorized(user)
                    userRepository.setCurrentUser(user)
                } else {
                    _authState.value = AuthState.Unauthorized
                }
            } catch (e: Exception) {
                _authState.value = AuthState.Unauthorized
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ Intent –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
     */
    fun getGoogleSignInIntent() = userRepository.getGoogleSignInIntent()

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    fun showPhoneLogin() {
        _uiState.update { it.copy(showPhoneLogin = true) }
    }

    /**
     * –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –∏ –∫–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    fun selectCountry(country: CountryInfo) {
        _uiState.update { it.copy(selectedCountry = country) }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
     */
    fun backToVerification() {
        _uiState.update { it.copy(isVerificationCompleted = false, isCodeSent = true) }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
     */
    fun saveUsernameAndSignIn(username: String) {
        viewModelScope.launch {
            try {
                val finalUser = _uiState.value.user!!.copy(username = username)
                try {
                    // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
                    userRepository.updateUserProfile(finalUser)
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            isAuthenticated = true,
                            user = finalUser
                        )
                    }
                } catch (e: Exception) {
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            isAuthenticated = true,
                            user = finalUser,
                            error = "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏"
                        )
                    }
                }
            } catch (e: Exception) {
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                    )
                }
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    fun verifyPhoneCode(code: String) {
        _uiState.update { it.copy(isLoading = true, error = "") }
        try {
            val vid = verificationId
            if (vid == null) {
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID"
                    )
                }
                return
            }

            val credential = userRepository.verifyPhoneCode(vid, code)
            if (credential != null) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
                phoneCredential = credential
                viewModelScope.launch {
                    val result = userRepository.signInWithPhoneCredential(credential)
                    result.onSuccess { user ->
                        _uiState.update { it1 ->
                            it1.copy(
                                isLoading = false,
                                isVerificationCompleted = user.username.isEmpty(),
                                user = user,
                                username = user.username,
                                isAuthenticated = user.username.isNotEmpty()
                            )
                        }
                    }.onFailure { e ->
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                error = e.message ?: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                            )
                        }
                    }
                }
            } else {
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                    )
                }
            }
        } catch (e: Exception) {
            _uiState.update {
                it.copy(
                    isLoading = false,
                    error = e.message ?: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞"
                )
            }
        }

    }

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    fun startPhoneAuth(
        phoneNumber: String,
        activity: Activity,
    ) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã
        val country = _uiState.value.selectedCountry
        var formattedNumber = phoneNumber

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ +
        formattedNumber = formattedNumber.replace(Regex("[^0-9]"), "")

        // –£–¥–∞–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞
        val countryCodeDigits = country?.code?.replace(Regex("[^0-9]"), "")
        if (countryCodeDigits?.let { formattedNumber.startsWith(it) } == true) {
            formattedNumber = formattedNumber.substring(countryCodeDigits.length)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ E.164
        if (country != null) {
            formattedNumber = "${country.code}${formattedNumber}"
        }

        _uiState.update { it.copy(isLoading = true, error = "", formattedPhoneNumber = formattedNumber) }

        try {
            val auth = FirebaseAuth.getInstance()

            // –°–æ–∑–¥–∞–µ–º callback-–æ–±—ä–µ–∫—Ç
            val callbacks = object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
                override fun onVerificationCompleted(credential: PhoneAuthCredential) {
                    phoneCredential = credential
                    _uiState.update { it.copy(isLoading = false, isVerificationCompleted = true) }
                }

                override fun onVerificationFailed(e: FirebaseException) {
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            error = e.message ?: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞"
                        )
                    }
                }

                override fun onCodeSent(
                    verificationId: String,
                    token: PhoneAuthProvider.ForceResendingToken
                ) {
                    this@UserViewModel.verificationId = verificationId
                    _uiState.update { it.copy(isLoading = false, isCodeSent = true) }
                }
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            val options = PhoneAuthOptions.newBuilder(auth)
                .setPhoneNumber(formattedNumber)
                .setTimeout(60L, TimeUnit.SECONDS)
                .setActivity(activity)
                .setCallbacks(callbacks)
                .build()

            // –ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            PhoneAuthProvider.verifyPhoneNumber(options)

        } catch (e: Exception) {
            e.printStackTrace()
            _uiState.update {
                it.copy(
                    isLoading = false,
                    error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                )
            }
        }
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    suspend fun logout() {
        try {
            _authState.value = AuthState.Loading
            val success = userRepository.logout()

            if (success) {
                _authState.value = AuthState.Unauthorized
            } else {
                if (_authState.value is AuthState.Loading) {
                    _authState.value = AuthState.Unauthorized
                }
            }
        } catch (e: Exception) {
            _authState.value = AuthState.Unauthorized
        }
    }

    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    fun resetState() {
        _uiState.update { LoginUiState(countryList = _countries, selectedCountry = _countries[0]) }
        resendTimer?.cancel()
        verificationId = null
        phoneCredential = null
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
     */
    fun signInWithGoogle(idToken: String) {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true, error = "") }

            try {
                val result = userRepository.signInWithGoogle(idToken)
                result.onSuccess { user ->
                    _uiState.update {
                        it.copy(
                            isLoading = false,
                            isAuthenticated = true,
                            user = user
                        )
                    }
                }
                    .onFailure { e ->
                        _uiState.update {
                            it.copy(
                                isLoading = false,
                                error = e.message ?: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google"
                            )
                        }
                    }
            } catch (e: Exception) {
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google"
                    )
                }
            }
        }
    }

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å LoginViewModel –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—à–∏–±–∫–∏:
    fun setError(message: String) {
        _uiState.update { it.copy(error = message) }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    fun setAuthorized(user: User) {
        _authState.value = AuthState.Authorized(user)
        userRepository.setCurrentUser(user)
    }

    /**
     * –°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    fun setUnauthorized() {
        _authState.value = AuthState.Unauthorized
        userRepository.setCurrentUser(null)
    }

    /**
     * Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ViewModel
     */
    class Factory(private val userRepository: UserRepository) : ViewModelProvider.Factory {
        @Suppress("UNCHECKED_CAST")
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(UserViewModel::class.java)) {
                return UserViewModel(userRepository) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }
}